@using Microsoft.JSInterop
@page "/metalwork/workrequest"
@* @page "/item/{itemId:int}" *@
@rendermode InteractiveServer
@* @inject eShop.MetallFactorUI.Services.EmailService emailService *@
@inject ILogger<WorkRequest> _logger 
@inject IJSRuntime JSRuntime


<div class="container">
    <div class="checkout">
        <div class="form">
            <div class="form-section">
                <h2>Work Request Details</h2>

                <div class="form-group">
                    <label>Producer Categories:</label>
                    <select class="form-control" @bind="selectedCategory">
                        <option value="">Select a category</option>
                        <option value="Welding">Welding</option>
                        <option value="Metalworking">Metalworking</option>
                        <option value="Sewing">Sewing</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Budget Range Selection:</label>
                    <select class="form-control" @bind="selectedBudgetRange">
                        <option value="">Select a budget range</option>
                        <option value="Under $1,000">Under $1,000</option>
                        <option value="$1,000 - $5,000">$1,000 - $5,000</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Quantity Specification:</label>
                    <InputNumber class="form-control" @bind-Value="quantity" />
                </div>
                <div class="form-group">
                    <label>Email:</label>
                    <InputText class="form-control" @bind-Value="exampleData" />
                </div>                
                <div class="form-group">
                    <label>Payment Methods:</label>
                    <select class="form-control" @bind="selectedPaymentMethod">
                        <option value="">Select a payment method</option>
                        <option value="Prepayment">Prepayment</option>
                        <option value="Partial Prepayment">Partial Prepayment</option>
                        <option value="Payment upon Completion">Payment upon Completion</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Source of Materials for Work:</label>
                    <select class="form-control" @bind="selectedMaterialSource">
                        <option value="">Select a source of materials</option>
                        <option value="Supplier Provided">Supplier Provided</option>
                        <option value="Client Provided">Client Provided</option>
                        <option value="Other">Other</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Delivery Options:</label>
                    <select class="form-control" @bind="selectedDeliveryOption">
                        <option value="">Select a delivery option</option>
                        <option value="Standard Delivery">Standard Delivery</option>
                        <option value="Express Delivery">Express Delivery</option>
                        <option value="Pickup">Pickup</option>
                    </select>
                </div>

                <div class="form-group">
                    <label>Delivery Deadlines:</label>
                    <InputDate class="form-control" @bind-Value="deliveryDeadline" />
                </div>

                <div class="checkbox">
                    <InputCheckbox @bind-Value="penaltyAgreement" />
                    <label>I agree to the penalties stipulated for delivery delays.</label>
                </div>

                <div class="checkbox">
                    <InputCheckbox @bind-Value="bonusAgreement" />
                    <label>I agree to receive bonuses for early delivery.</label>
                </div>

                <div class="checkbox">
                    <InputCheckbox @bind-Value="arbitrationAgreement" />
                    <label>I agree to the appointment of an arbitrator for disputes.</label>
                </div>

                <div class="form-group">
                    <label>File Attachment:</label>
                    <InputFile @bind-Value="file" />
                </div>

                <div class="form-group">
                    <label>Additional Information:</label>
                    <InputTextArea class="form-control" @bind-Value="additionalInfo" />
                </div>

                <button class="btn btn-primary" style="width:200px" @onclick="SubmitForm">Send e-mail</button>
            </div>
        </div>

        <div class="form">
            <div class="form-section">
                <h2>Shipping address</h2>

                <div class="form-group">
                    <label>Address:</label>
                    <InputText class="form-control" @bind-Value="shippingAddress" />
                </div>
                <div class="form-group">
                    <label>City:</label>
                    <InputText class="form-control" @bind-Value="shippingCity" />
                </div>

                <div class="form-group">
                    <label>State:</label>
                    <InputText class="form-control" @bind-Value="shippingState" />
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    public static string Url(NavigationManager nav)
        => $"metalwork/workrequest";
    //=> $"user/login?returnUrl={Uri.EscapeDataString(nav.ToBaseRelativePath(nav.Uri))}";

    // Define your model properties here
private string? selectedCategory;
private string? selectedBudgetRange;
private string? shippingAddress;
private string? shippingCity;
private string? shippingState;
private int quantity;
//private string email;
private string? selectedPaymentMethod;
private string? selectedMaterialSource;
private string? selectedDeliveryOption;
private DateTime deliveryDeadline;
private bool penaltyAgreement;
private bool bonusAgreement;
private bool arbitrationAgreement;
private IBrowserFile? file;
private string? additionalInfo;
//private bool formSubmitted = false;
private string? exampleData;
private EmailRequestDTO? emailRequest;
public class EmailRequestDTO
{
    public string[]? To { get; set; }
    public string? Subject { get; set; }
    public string? Body { get; set; }
}

/*
    protected  async Task test()
    {
        // Perform form submission logic here
        formSubmitted = true;

        emailRequest = new EmailRequestDTO
                {
                    To = new[] { "recipient@example.com" },
                    Subject = "Test Email",
                    Body = "This is a test email."
                };
        ///
        _logger.LogInformation("SubmitForm");
        await emailService.SendEmailAsync(emailRequest);        
    }
  */ 
protected async Task SubmitForm()
{
    // Perform form submission logic here
    //formSubmitted = true;

    emailRequest = new EmailRequestDTO
    {
        To = new[] { "recipient@example.com" },
        Subject = "Test Email",
        Body = "This is a test email."
    };

    _logger.LogInformation("SubmitForm");
    //await emailService.SendEmailAsync(emailRequest);
    await Task.Delay(10);
}


    
    protected override void OnInitialized()
    {
        
        exampleData = "Test";// ExampleService.GetExampleData();
                _logger.LogInformation("OnInitialized");

        ///
       
    }
    ///
    protected override void OnAfterRender(bool firstRender)
    {
          // Display an alert after form submission
        // await JSRuntime.InvokeVoidAsync("alert", "Email sent successfully!");
        if (firstRender)
        {
            _logger.LogInformation($"Component rendered successfully,{firstRender} ");
        }
        else
        {
            _logger.LogInformation($"Component else rendered successfully,{firstRender} ");            
        }
    }

}