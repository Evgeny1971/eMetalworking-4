﻿@using Microsoft.JSInterop
@inject NavigationManager Nav

@page "/metalwork/workrequest/{id:int}"
@page "/metalwork/workrequest"

@using eShop.ServiceDefaults;
@using eShop.WebAppComponents.Model

@inject EmailService emailService
@inject CacheService cacheService

@* @page "/item/{itemId:int}" *@
@rendermode InteractiveServer
@* @inject eShop.MetallFactorUI.Services.EmailService emailService *@
@inject ILogger<WorkRequest> _logger 
@inject IJSRuntime JSRuntime


<link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet" />
<div class="container mt-5">
    <div class="checkout">
        <div class="form">
            <div class="form-section">
                <h2 class="mb-4">Work Request Details</h2>

                <div class="form-group">
                    <legend>Producer Categories:</legend>
                        @foreach (var category in categories)
                        {
                            <div class="form-check">
                                <input type="radio" class="form-check-input" id="category-@category" name="category" value="@category" @onchange="(e) => selectedCategory = category" checked="@(selectedCategory == category)" />
                                <label class="form-check-label" for="category-@category">@category</label>
                            </div>
                        }
                </div>

                <div class="form-group">
                    <label>Budget Range Selection:</label>
                    <ul class="bullet-list">
                        @foreach (var budget in budgetRanges)
                        {
                            <li>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="budget-@budget" name="budget" value="@budget" @onchange="(e) => selectedBudgetRange = budget" checked="@(selectedBudgetRange == budget)" />
                                    <label class="form-check-label" for="budget-@budget">@budget</label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <div class="form-group">
                    <label>Quantity Specification:</label>
                    <InputNumber class="form-control" @bind-Value="quantity" />
                </div>

                <div class="form-group">
                    <label>Email:</label>
                    <InputText class="form-control" @bind-Value="exampleData" />
                </div>

                <div class="form-group">
                    <label>Payment Methods:</label>
                    <ul class="bullet-list">
                        @foreach (var method in paymentMethods)
                        {
                            <li>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="payment-@method" name="paymentMethod" value="@method" @onchange="(e) => selectedPaymentMethod = method" checked="@(selectedPaymentMethod == method)" />
                                    <label class="form-check-label" for="payment-@method">@method</label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <div class="form-group">
                    <label>Source of Materials for Work:</label>
                    <ul class="bullet-list">
                        @foreach (var source in materialSources)
                        {
                            <li>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="source-@source" name="materialSource" value="@source" @onchange="(e) => selectedMaterialSource = source" checked="@(selectedMaterialSource == source)" />
                                    <label class="form-check-label" for="source-@source">@source</label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <div class="form-group">
                    <label>Delivery Options:</label>
                    <ul class="bullet-list">
                        @foreach (var option in deliveryOptions)
                        {
                            <li>
                                <div class="form-check">
                                    <input type="radio" class="form-check-input" id="delivery-@option" name="deliveryOption" value="@option" @onchange="(e) => selectedDeliveryOption = option" checked="@(selectedDeliveryOption == option)" />
                                    <label class="form-check-label" for="delivery-@option">@option</label>
                                </div>
                            </li>
                        }
                    </ul>
                </div>

                <div class="form-group">
                    <label>Delivery Deadlines:</label>
                    <InputDate class="form-control" @bind-Value="deliveryDeadline" />
                </div>

                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="penaltyAgreement" @bind-Value="penaltyAgreement" />
                    <label class="form-check-label" for="penaltyAgreement">I agree to the penalties stipulated for delivery delays.</label>
                </div>

                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="bonusAgreement" @bind-Value="bonusAgreement" />
                    <label class="form-check-label" for="bonusAgreement">I agree to receive bonuses for early delivery.</label>
                </div>

                <div class="form-check">
                    <InputCheckbox class="form-check-input" id="arbitrationAgreement" @bind-Value="arbitrationAgreement" />
                    <label class="form-check-label" for="arbitrationAgreement">I agree to the appointment of an arbitrator for disputes.</label>
                </div>

                <div class="form-group">
                    <label>File Attachment:</label>
                    <InputFile @bind-value="file" />
                </div>

                <div class="form-group">
                    <label>Additional Information:</label>
                    <InputTextArea class="form-control" @bind-Value="additionalInfo" />
                </div>

                <button class="btn btn-primary" style="width:200px" @onclick="SubmitForm">Send e-mail</button>
            </div>
        </div>

        <div class="form">
            <div class="form-section">
                <h2 class="mb-4">Shipping address</h2>

                <div class="form-group">
                    <label>Address:</label>
                    <InputText class="form-control" @bind-Value="shippingAddress" />
                </div>

                <div class="form-row">
                    <div class="form-group col-md-6">
                        <label>City:</label>
                        <InputText class="form-control" @bind-Value="shippingCity" />
                    </div>

                    <div class="form-group col-md-6">
                        <label>State:</label>
                        <InputText class="form-control" @bind-Value="shippingState" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? id { get; set; }
    private string? selectedCategory;
    private string? selectedBudgetRange;
    private string? shippingAddress;
    private string? shippingCity;
    private string? shippingState;
    private int quantity;
    private string? selectedPaymentMethod;
    private string? selectedMaterialSource;
    private string? selectedDeliveryOption;
    private DateTime deliveryDeadline;
    private bool penaltyAgreement;
    private bool bonusAgreement;
    private bool arbitrationAgreement;
    private IBrowserFile? file;
    private string? additionalInfo;
    private string? exampleData;
    private string cacheKey = "unique-id";
    private int id_local;

    private List<string> categories = new List<string> { "Welding", "Metalworking", "Sewing" };
    private List<string> budgetRanges = new List<string> { "Under $1,000", "$1,000 - $5,000" };
    private List<string> paymentMethods = new List<string> { "Prepayment", "Partial Prepayment", "Payment upon Completion" };
    private List<string> materialSources = new List<string> { "Supplier Provided", "Client Provided", "Other" };
    private List<string> deliveryOptions = new List<string> { "Standard Delivery", "Express Delivery", "Pickup" };


    public static string Url(NavigationManager nav)
        => $"metalwork/workrequest";

    public static string UrlLink(NavigationManager nav)
            => nav.Uri;

    protected override void OnInitialized()
    {
        id_local = (id.HasValue ? id.Value : cacheService.Count + 1);
        cacheKey = $"cach_key_id_{id_local}";

        if (id.HasValue)
        {
            _logger.LogInformation($"OnInitialized, cacheKey:{cacheKey}");
            WorkRequestEntity? workRequest = cacheService.Get<WorkRequestEntity>(cacheKey) as WorkRequestEntity;
            if (workRequest != null)
            {
                _logger.LogInformation("workRequest is not null");

                selectedCategory = workRequest.SelectedCategory;
                selectedBudgetRange = workRequest.SelectedBudgetRange;
                quantity = workRequest.Quantity;
                exampleData = workRequest.ExampleData;
                selectedPaymentMethod = workRequest.SelectedPaymentMethod;
                selectedMaterialSource = workRequest.SelectedMaterialSource;
                selectedDeliveryOption = workRequest.SelectedDeliveryOption;
                deliveryDeadline = workRequest.DeliveryDeadline;
                penaltyAgreement = workRequest.PenaltyAgreement;
                bonusAgreement = workRequest.BonusAgreement;
                arbitrationAgreement = workRequest.ArbitrationAgreement;
                additionalInfo = workRequest.AdditionalInfo;
                shippingAddress = workRequest.ShippingAddress;
                shippingCity = workRequest.ShippingCity;
                shippingState = workRequest.ShippingState;
            }
        }
    }

    private async Task SubmitForm()
    {
        WorkRequestEntity workRequest = new WorkRequestEntity
        {
            SelectedCategory = selectedCategory,
            SelectedBudgetRange = selectedBudgetRange,
            Quantity = quantity,
            ExampleData = exampleData,
            SelectedPaymentMethod = selectedPaymentMethod,
            SelectedMaterialSource = selectedMaterialSource,
            SelectedDeliveryOption = selectedDeliveryOption,
            DeliveryDeadline = deliveryDeadline,
            PenaltyAgreement = penaltyAgreement,
            BonusAgreement = bonusAgreement,
            ArbitrationAgreement = arbitrationAgreement,
            AdditionalInfo = additionalInfo,
            ShippingAddress = shippingAddress,
            ShippingCity = shippingCity,
            ShippingState = shippingState
        };
        _logger.LogInformation($"cacheKey before insert into cache:{cacheKey}");

        cacheService.Set(cacheKey, workRequest, TimeSpan.FromMinutes(10));

        _logger.LogInformation($"cacheKey after insert into cache:{cacheKey}");

        await Task.FromResult<string>("Test");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            _logger.LogInformation($"Component rendered successfully,{firstRender} ");
        }
        else
        {
            _logger.LogInformation($"Component else rendered successfully,{firstRender} ");            
        }
    }
}
